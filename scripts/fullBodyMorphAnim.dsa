// Get the current scene and selected node
var scene = Scene;
var selectedNode = scene.getPrimarySelection();

// Get the time step for animation
var timeStep = Scene.getTimeStep();
print("Time step: " + timeStep.valueOf());

// Array of morphs to animate with correct names
// Each entry can be either a single morph or an array of linked morphs
// Format: "MorphName:value" or ["Morph1:value", "Morph2:value"]
// -> Set all Sonsy Weight Gain System Morphs to a max of 100% in the Parameter Settings in Daz Studio before executing the script
// Deleted: GlutesRotateX
var morphConfigs = [
  "GC BodyMorph:1",
  "FBMBodyTone:1",
  "Torso Muscular:1",
  "PBMWaistWidth:-1",
  "CTRLCartoon Rectangle/HourGlass Body Shape:-1", 
  "Shape THIGHS BIG:1",
  "Adjust THIGH SIZE:1", // new
  "5 PEAR SHAPE FULL:1",
  "5 PEAR SHAPE PARTIAL:1",
  "6 PEAR SHAPE BIGGER:1", // new
  "PBMAreolaeDiameter:1",
  "Areola Size:1",
  "Center Gap Width:1",
  "CTRLBreastsNatural:1", // new, needs param adjustment to -100
  "PBMBreastsCleavage:1",
  "Lara Croft Cleavage:1", // new
  "PBMBreastsDiameter:1",
  ["PBMBreastsImplantsL:1", "PBMBreastsImplantsR:1"],
  "PBMBreastsSize:1",
  "PBMBreastsPerkSide:1", // new
  "Breast Preset 01:1",
  "Breast Preset 04:1", // new
  "Breast Preset 10:1",
  "PBMBreastsUpwardSlope:1",
  "!Breast Under Weight:-1", // new, needs param adjustment to -100
  "!Breast Large:1",
  "PBMNipplesSize:1",
  "PBMNipplesLarge:1", // new
  "Nipples Apply:1",
  "Nipples Inflate:1",
  "Nipples Tip Adjust:1",
  "PBMGlutesUpperDepth:1",
  "PBMGlutesLowerDepth:1",
  "PBMGlutesSize:1",
  "PBMGlutesWidth:1",
  "Glute Angle:1",
  "Glute Depth:1",
  "Glute Height Lower:1",
  "Glute Height Inner:1", // new
  "Glute UpDown:-1", // new
  "Glute Length:1",
  "Glute Width Upper:1",
  "Glute Width Lower:1",
  "Glute Inner Close:1", // new
  "Glute Tension:-1", // needs param adjustment to -100
  "Glute Size 1:1",
  "Glute Size 2:1",
  "Booty 06:1",
  "Booty 11:1", // new
  "Shape BIG BUTT:1", // new
  "Shape BIG BUTT BIGGER:1", // new
  ["LGlute Rotate Y:1", "RGlute Rotate Y:1"],
  ["LGlute Rotate Z:1", "RGlute Rotate Z:1"],
  ["LGlute Shape Height:1", "RGlute Shape Height:1"],
  ["LGlute Shape Height Lower:1", "RGlute Shape Height Lower:1"],
  ["LGlute Shape Width:1", "RGlute Shape Width:1"],
  "PBMHipSize:1",
  "Hip Depth:1", // new
  "Hip Diameter:1", // new
  "Hip Rotate 1:1",
  "Hip Rotate 2:1", // new
  "Hip Shape 3:1", // new
  "Hip Shape 3:-1", // new
  "Hip Shape 4:1", // new
  "Hip Shape 4:-1", // new
  "Hip UpDown:1", // new
  "Hip Height:1", // newNEW
  "PBMHipBoneSize:1", // new
  "PBMThighsSize:1",
  "Thigh Apart:1",
  "Thigh Back:1",
  "Thigh Front:1",
  "Thigh Inflate:1", // new
  "Thigh Outer:1", // new
  "Thigh Rotate:1", // new
  "Thigh Thickness Depth:1",
  "Thigh Thickness Width:1",
  "Shape ADJUST INNER THIGH:1",
  "Adjust LOWER LEG SIZE:-1",
  "PBMNavel:1",
  "PBMNavelSize:1",
  "PBMPregnant:1",
  "Arms Muscular:1", // new
  "PBMNeckSize:-1", // new
  "Shape NAVEL FOR PEAR:1", // new
  "Shape NAVEL DEEP FOR PEAR:1" // new
];

// Helper function to parse morph config entry
function parseMorphConfig(config) {
  if (Array.isArray(config)) {
    return config.map(function (item) {
      var parts = item.split(":");
      return { name: parts[0], value: parseFloat(parts[1]) };
    });
  } else {
    var parts = config.split(":");
    return [{ name: parts[0], value: parseFloat(parts[1]) }];
  }
}

// Calculate total frames needed (accounting for linked morphs counting as one frame)
var totalMorphFrames = morphConfigs.length;

// First, extend the timeline to accommodate our morphs
var currentRange = Scene.getAnimRange();
var currentFrame = Scene.getFrame(); // Get current frame position
var framesNeeded = totalMorphFrames + 2; // +2 for cleanup frames before and after

// Calculate new end point
var newEndPoint = currentRange.start + timeStep * (currentFrame + framesNeeded);
if (newEndPoint > currentRange.end) {
  // Only extend if we need more frames
  var newTimeRange = new DzTimeRange(currentRange.start, newEndPoint);
  Scene.setAnimRange(newTimeRange);

  var oldFrames = currentRange.end / timeStep;
  var newFrames = newEndPoint / timeStep;
  print(
    "Timeline extended from " +
      oldFrames +
      " frames to " +
      newFrames +
      " frames"
  );
}

// Track missing morphs and all found morphs
var missingMorphs = [];
var allFoundMorphs = [];

// Function to set all morphs to 0 at a specific frame
function resetAllMorphsAtFrame(obj, frame) {
  for (var i = 0; i < morphConfigs.length; i++) {
    var morphs = parseMorphConfig(morphConfigs[i]);
    morphs.forEach(function (morph) {
      var morphMod = null;
      for (var m = 0; m < obj.getNumModifiers(); m++) {
        if (obj.getModifier(m).getLabel() === morph.name) {
          morphMod = obj.getModifier(m);
          break;
        }
      }
      if (morphMod) {
        var channel = morphMod.getValueChannel();
        channel.setValue(timeStep * frame, 0);
      }
    });
  }
}

// Check if there is a selected node
if (selectedNode) {
  var label = selectedNode.getLabel();
  print("Selected node label: " + label);

  // Check if the node label corresponds to known figure names
  if (label === "Genesis 8.1 Female" || label === "Genesis 8.1 Male" || label === "Genesis 9") {
    print("Found figure: " + label);
    beginUndo();

    // Get the object to access modifiers
    var obj = selectedNode.getObject();
    var numMods = obj.getNumModifiers();
    print("Number of modifiers found: " + numMods);

    // First, collect all available morph names
    for (var m = 0; m < numMods; m++) {
      var modLabel = obj.getModifier(m).getLabel();
      allFoundMorphs.push(modLabel);
    }

    // Use current frame as start frame
    var startFrame = currentFrame;
    print("Starting at frame: " + startFrame);
    var endFrame = startFrame + totalMorphFrames + 1;

    // Reset frames
    Scene.setFrame(startFrame - 1);
    resetAllMorphsAtFrame(obj, startFrame - 1);

    for (var frame = startFrame; frame < endFrame; frame++) {
      Scene.setFrame(frame);
      resetAllMorphsAtFrame(obj, frame);
    }

    // Then set each morph or morph group to its target value at its specific frame
    for (var i = 0; i < morphConfigs.length; i++) {
      var morphs = parseMorphConfig(morphConfigs[i]);
      var targetFrame = startFrame + i;
      Scene.setFrame(targetFrame);

      // Ensure we set all linked morphs at exactly the same frame
      var morphsToSet = [];

      // First, gather all morphs
      morphs.forEach(function (morph) {
        var currentMorph = null;
        for (var m = 0; m < numMods; m++) {
          if (obj.getModifier(m).getLabel() === morph.name) {
            currentMorph = obj.getModifier(m);
            break;
          }
        }

        if (currentMorph) {
          morphsToSet.push({
            morph: currentMorph,
            name: morph.name,
            value: morph.value,
          });
        } else {
          missingMorphs.push(morph.name);
          print("⚠️ Morph not found: " + morph.name);
        }
      });

      // Then set all values at once for this frame
      morphsToSet.forEach(function (morphData) {
        var valueChannel = morphData.morph.getValueChannel();
        valueChannel.setValue(timeStep * targetFrame, parseFloat(morphData.value));
        print(
          "Frame " +
            targetFrame +
            ": Set " +
            morphData.name +
            " = " +
            morphData.value
        );
      });
    }

    acceptUndo("Apply Morph Keyframes");

    // Return to the start frame
    Scene.setFrame(startFrame);

    // If there were any missing morphs, print all available morphs
    if (missingMorphs.length > 0) {
      print(
        "\n⚠️ Some morphs were not found. Here is a complete list of all available morphs:"
      );
      allFoundMorphs.sort(); // Sort alphabetically
      for (var i = 0; i < allFoundMorphs.length; i++) {
        print("  " + allFoundMorphs[i]);
      }
    }
  } else {
    print("The selected node is not recognized as a Genesis 8.1 figure.");
  }
} else {
  print("No nodes are selected.");
}
